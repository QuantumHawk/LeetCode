namespace dailyTasks.Yandex
{
    /*C. Удаление дубликатов
Язык	Ограничение времени	Ограничение памяти	Ввод	Вывод
Все языки	1 секунда	10Mb	стандартный ввод или input.txt	стандартный вывод или output.txt
Oracle Java 7	1 секунда	20Mb
Node JS 8.9.4	1 секунда	20Mb
Oracle Java 8	1 секунда	20Mb
Kotlin 1.1.50 (JRE 1.8.0)	1 секунда	20Mb
Node JS 8.16	1 секунда	20Mb
Дан упорядоченный по неубыванию массив целых 32-разрядных чисел. Требуется удалить из него все повторения.

Желательно получить решение, которое не считывает входной файл целиком в память, т.е., использует лишь константный объем памяти в процессе работы.

Формат ввода
Первая строка входного файла содержит единственное число n, n ≤ 1000000.

На следующих n строк расположены числа — элементы массива, по одному на строку. Числа отсортированы по неубыванию.

Формат вывода
Выходной файл должен содержать следующие в порядке возрастания уникальные элементы входного массива.*/
    public class RemoveDuplicate
    {
        /*static void Main(string[] args)
        {

            int n = Convert.ToInt32(Console.ReadLine());
            int j = 0;
            int[] dict = new int[n]; //?

            for (int i = 0; i < n; i++)
            {
                int m = 0;
                m = Convert.ToInt32(Console.ReadLine());

                if (j == 0)
                { 
                    dict[0] = m;
                    j++;
                }
                else
                {
                    if (dict[j-1] != m)
                    {
                        dict[j] = m;
                        j++;
                    }
                    else continue;
                }
            }

            for(int i=0; i< j;  i++)
            {
                Console.WriteLine(dict[i]);
            }
            }*/
        }
    }
